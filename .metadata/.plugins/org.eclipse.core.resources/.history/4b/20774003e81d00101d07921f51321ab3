/*
 * user_main.c
 *
 *  Created on: Apr 20, 2025
 *      Author: sandeep
 */

/*
 * user_main.c
 *
 *  Created on: Apr 20, 2025
 *      Author: sandeep
 */

#include <string.h>
#include "stm32f4xx_hal.h"
#include "stm32f4xx_hal_rcc.h"
#include "user_main.h"

#define UART_DATA_MAX_LENGTH     128

UART_HandleTypeDef huart2;

uint8_t uart_data_buffer[UART_DATA_MAX_LENGTH+1];


void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}



/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

static void switch_to_hsi(void)
{
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint8_t flash_latency = FLASH_LATENCY_0;

	/* Switch to HSI to safely reconfigure PLL */

	/* Oscillator initialization */
	memset(&osc_init,0,sizeof(osc_init));

	/* Clock Initialization */
	memset(&clk_init,0,sizeof(clk_init));

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	osc_init.HSIState = RCC_HSI_ON;
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	osc_init.PLL.PLLState = RCC_PLL_NONE;

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;

	/* Oscillator config init */
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
	{
		Error_Handler();
	}

	/* Clock Config */
	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
	{
		Error_Handler();
	}

}

/* clock_freq in Mhz */
static void SystemClockConfigPll(uint8_t clock_freq)
{
	switch_to_hsi();

	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;
	uint8_t flash_latency = FLASH_LATENCY_0;

	/* Oscillator initialization */
	memset(&osc_init,0,sizeof(osc_init));

	/* Clock Initialization */
	memset(&clk_init,0,sizeof(clk_init));

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	osc_init.HSIState = RCC_HSI_ON;
	osc_init.HSICalibrationValue = 16;

	/* PLL config */
	osc_init.PLL.PLLState = RCC_PLL_ON;
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;





	switch(clock_freq)
	{
		case SYS_CLOCK_FREQ_50_MHZ:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 100;
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
			osc_init.PLL.PLLQ = 2;
			osc_init.PLL.PLLR = 2;

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			flash_latency = FLASH_LATENCY_1;
		}
		break;
		case SYS_CLOCK_FREQ_84_MHZ:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 168;
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
			osc_init.PLL.PLLQ = 2;
			osc_init.PLL.PLLR = 2;

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			flash_latency = FLASH_LATENCY_2;
		}
		break;
		case SYS_CLOCK_FREQ_120_MHZ:
		{
			osc_init.PLL.PLLM = 16;
			osc_init.PLL.PLLN = 240;
			osc_init.PLL.PLLP = RCC_PLLP_DIV2;
			osc_init.PLL.PLLQ = 2;
			osc_init.PLL.PLLR = 2;

			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;

			flash_latency = FLASH_LATENCY_3;
		}
		break;
		default:
		{
			while(1);
		}
		break;
	}

	/* Oscillator config init */
	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK)
	{
		Error_Handler();
	}

	/* Clock Config */
	if(HAL_RCC_ClockConfig(&clk_init, flash_latency) != HAL_OK)
	{
		Error_Handler();
	}

	/* disable internal clock */
	__HAL_RCC_HSI_DISABLE();


	/* SYSTICK Configuration */
	if(HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000) != HAL_OK)
	{
		Error_Handler();
	}

	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);



}

int main(void)
{
	uint8_t config_cycle = 1;
	HAL_Init();

	/* Configure each frequency and print details of each configuration every 3 seconds */
	while(1)
	{
		switch(config_cycle)
		{
			case 0:
			{
				SystemClockConfig(SYS_CLOCK_FREQ_50_MHZ);
			}
			break;
			case 1:
			{
				SystemClockConfig(SYS_CLOCK_FREQ_84_MHZ);
			}
			break;
			case 2:
			{
				SystemClockConfig(SYS_CLOCK_FREQ_120_MHZ);
			}
			break;
			default:
			{

			}
			break;
		}
		config_cycle = (config_cycle + 1) % 3;

		MX_USART2_UART_Init();

		/* SYSCLK */
		memset(&uart_data_buffer,0,sizeof(uart_data_buffer));
		sprintf(uart_data_buffer,"SYSCLK : %ldHz\r\n",HAL_RCC_GetSysClockFreq());
		HAL_UART_Transmit(&huart2,uart_data_buffer,strlen(uart_data_buffer),HAL_MAX_DELAY);

		/* HCLK */
		memset(&uart_data_buffer,0,sizeof(uart_data_buffer));
		sprintf(uart_data_buffer,"HCLK   : %ldHz\r\n",HAL_RCC_GetHCLKFreq());
		HAL_UART_Transmit(&huart2,uart_data_buffer,strlen(uart_data_buffer),HAL_MAX_DELAY);

		/* PCLK1 */
		memset(&uart_data_buffer,0,sizeof(uart_data_buffer));
		sprintf(uart_data_buffer,"PCLK1  : %ldHz\r\n",HAL_RCC_GetPCLK1Freq());
		HAL_UART_Transmit(&huart2,uart_data_buffer,strlen(uart_data_buffer),HAL_MAX_DELAY);

		/* PCLK2 */
		memset(&uart_data_buffer,0,sizeof(uart_data_buffer));
		sprintf(uart_data_buffer,"PCLK2  : %ldHz\r\n",HAL_RCC_GetPCLK2Freq());
		HAL_UART_Transmit(&huart2,uart_data_buffer,strlen(uart_data_buffer),HAL_MAX_DELAY);

		HAL_Delay(3000);

	}




	while(1);

	return 0;
}
