
sleep_on_exit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002860  08002860  00003860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002878  08002878  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002878  08002878  00003878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002880  08002880  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002880  08002880  00003880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002884  08002884  00003884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002888  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08002894  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08002894  000040bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d26c  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca4  00000000  00000000  000112a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00012f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009dc  00000000  00000000  00013be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002115c  00000000  00000000  000145c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e4a0  00000000  00000000  00035720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd341  00000000  00000000  00043bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110f01  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003508  00000000  00000000  00110f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011444c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002848 	.word	0x08002848

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002848 	.word	0x08002848

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa5a 	bl	80009b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f810 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8ce 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f8a2 	bl	800064c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8000508:	f000 f86a 	bl	80005e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_PWR_EnableSleepOnExit();
 800050c:	f000 fd9c 	bl	8001048 <HAL_PWR_EnableSleepOnExit>

  HAL_TIM_Base_Start_IT(&htim6);
 8000510:	4802      	ldr	r0, [pc, #8]	@ (800051c <main+0x28>)
 8000512:	f001 fbe1 	bl	8001cd8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000516:	bf00      	nop
 8000518:	e7fd      	b.n	8000516 <main+0x22>
 800051a:	bf00      	nop
 800051c:	20000028 	.word	0x20000028

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b094      	sub	sp, #80	@ 0x50
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 031c 	add.w	r3, r7, #28
 800052a:	2234      	movs	r2, #52	@ 0x34
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f002 f95e 	bl	80027f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000544:	2300      	movs	r3, #0
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <SystemClock_Config+0xb8>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800054c:	4a22      	ldr	r2, [pc, #136]	@ (80005d8 <SystemClock_Config+0xb8>)
 800054e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000552:	6413      	str	r3, [r2, #64]	@ 0x40
 8000554:	4b20      	ldr	r3, [pc, #128]	@ (80005d8 <SystemClock_Config+0xb8>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000560:	2300      	movs	r3, #0
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <SystemClock_Config+0xbc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800056c:	4a1b      	ldr	r2, [pc, #108]	@ (80005dc <SystemClock_Config+0xbc>)
 800056e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000572:	6013      	str	r3, [r2, #0]
 8000574:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <SystemClock_Config+0xbc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	2302      	movs	r3, #2
 8000582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000584:	2301      	movs	r3, #1
 8000586:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000588:	2310      	movs	r3, #16
 800058a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058c:	2300      	movs	r3, #0
 800058e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 031c 	add.w	r3, r7, #28
 8000594:	4618      	mov	r0, r3
 8000596:	f001 f8b1 	bl	80016fc <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005a0:	f000 f8ec 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	f107 0308 	add.w	r3, r7, #8
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fd51 	bl	8001068 <HAL_RCC_ClockConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005cc:	f000 f8d6 	bl	800077c <Error_Handler>
  }
}
 80005d0:	bf00      	nop
 80005d2:	3750      	adds	r7, #80	@ 0x50
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80005ee:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_TIM6_Init+0x64>)
 80005f0:	4a15      	ldr	r2, [pc, #84]	@ (8000648 <MX_TIM6_Init+0x68>)
 80005f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <MX_TIM6_Init+0x64>)
 80005f6:	2263      	movs	r2, #99	@ 0x63
 80005f8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fa:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_TIM6_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 16000;
 8000600:	4b10      	ldr	r3, [pc, #64]	@ (8000644 <MX_TIM6_Init+0x64>)
 8000602:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000606:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b0e      	ldr	r3, [pc, #56]	@ (8000644 <MX_TIM6_Init+0x64>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800060e:	480d      	ldr	r0, [pc, #52]	@ (8000644 <MX_TIM6_Init+0x64>)
 8000610:	f001 fb12 	bl	8001c38 <HAL_TIM_Base_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800061a:	f000 f8af 	bl	800077c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800061e:	2300      	movs	r3, #0
 8000620:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000622:	2300      	movs	r3, #0
 8000624:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4619      	mov	r1, r3
 800062a:	4806      	ldr	r0, [pc, #24]	@ (8000644 <MX_TIM6_Init+0x64>)
 800062c:	f001 fd8c 	bl	8002148 <HAL_TIMEx_MasterConfigSynchronization>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000636:	f000 f8a1 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000028 	.word	0x20000028
 8000648:	40001000 	.word	0x40001000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 fdf0 	bl	8002268 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f875 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000070 	.word	0x20000070
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b2d      	ldr	r3, [pc, #180]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a2c      	ldr	r2, [pc, #176]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b23      	ldr	r3, [pc, #140]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000770 <MX_GPIO_Init+0xd0>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_GPIO_Init+0xd0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_GPIO_Init+0xd0>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a17      	ldr	r2, [pc, #92]	@ (8000770 <MX_GPIO_Init+0xd0>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <MX_GPIO_Init+0xd0>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2120      	movs	r1, #32
 800072a:	4812      	ldr	r0, [pc, #72]	@ (8000774 <MX_GPIO_Init+0xd4>)
 800072c:	f000 fc58 	bl	8000fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000730:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000736:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0314 	add.w	r3, r7, #20
 8000744:	4619      	mov	r1, r3
 8000746:	480c      	ldr	r0, [pc, #48]	@ (8000778 <MX_GPIO_Init+0xd8>)
 8000748:	f000 fab6 	bl	8000cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800074c:	2320      	movs	r3, #32
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	4619      	mov	r1, r3
 8000762:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_GPIO_Init+0xd4>)
 8000764:	f000 faa8 	bl	8000cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000768:	bf00      	nop
 800076a:	3728      	adds	r7, #40	@ 0x28
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40023800 	.word	0x40023800
 8000774:	40020000 	.word	0x40020000
 8000778:	40020800 	.word	0x40020800

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <Error_Handler+0x8>

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <HAL_MspInit+0x4c>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000796:	4a0f      	ldr	r2, [pc, #60]	@ (80007d4 <HAL_MspInit+0x4c>)
 8000798:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079c:	6453      	str	r3, [r2, #68]	@ 0x44
 800079e:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <HAL_MspInit+0x4c>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <HAL_MspInit+0x4c>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	4a08      	ldr	r2, [pc, #32]	@ (80007d4 <HAL_MspInit+0x4c>)
 80007b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ba:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007c6:	2007      	movs	r0, #7
 80007c8:	f000 fa34 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40023800 	.word	0x40023800

080007d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000820 <HAL_TIM_Base_MspInit+0x48>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d115      	bne.n	8000816 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <HAL_TIM_Base_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a0c      	ldr	r2, [pc, #48]	@ (8000824 <HAL_TIM_Base_MspInit+0x4c>)
 80007f4:	f043 0310 	orr.w	r3, r3, #16
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <HAL_TIM_Base_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	f003 0310 	and.w	r3, r3, #16
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2036      	movs	r0, #54	@ 0x36
 800080c:	f000 fa1d 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000810:	2036      	movs	r0, #54	@ 0x36
 8000812:	f000 fa36 	bl	8000c82 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000816:	bf00      	nop
 8000818:	3710      	adds	r7, #16
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40001000 	.word	0x40001000
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08a      	sub	sp, #40	@ 0x28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a19      	ldr	r2, [pc, #100]	@ (80008ac <HAL_UART_MspInit+0x84>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d12b      	bne.n	80008a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	4a17      	ldr	r2, [pc, #92]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000858:	6413      	str	r3, [r2, #64]	@ 0x40
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a10      	ldr	r2, [pc, #64]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <HAL_UART_MspInit+0x88>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000882:	230c      	movs	r3, #12
 8000884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000892:	2307      	movs	r3, #7
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <HAL_UART_MspInit+0x8c>)
 800089e:	f000 fa0b 	bl	8000cb8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008a2:	bf00      	nop
 80008a4:	3728      	adds	r7, #40	@ 0x28
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40004400 	.word	0x40004400
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40020000 	.word	0x40020000

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <NMI_Handler+0x4>

080008c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <UsageFault_Handler+0x4>

080008e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ee:	b480      	push	{r7}
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090e:	f000 f8a1 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800091c:	2120      	movs	r1, #32
 800091e:	4804      	ldr	r0, [pc, #16]	@ (8000930 <TIM6_DAC_IRQHandler+0x18>)
 8000920:	f000 fb77 	bl	8001012 <HAL_GPIO_TogglePin>


  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000924:	4803      	ldr	r0, [pc, #12]	@ (8000934 <TIM6_DAC_IRQHandler+0x1c>)
 8000926:	f001 fa47 	bl	8001db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020000 	.word	0x40020000
 8000934:	20000028 	.word	0x20000028

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000994 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000960:	f7ff ffea 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	@ (800099c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	@ (80009a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800098a:	f001 ff39 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098e:	f7ff fdb1 	bl	80004f4 <main>
  bx  lr    
 8000992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a0:	08002888 	.word	0x08002888
  ldr r2, =_sbss
 80009a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a8:	200000bc 	.word	0x200000bc

080009ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <HAL_Init+0x40>)
 80009ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_Init+0x40>)
 80009c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_Init+0x40>)
 80009d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f92b 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fed0 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023c00 	.word	0x40023c00

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f943 	bl	8000c9e <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a30:	f000 f90b 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	200000b8 	.word	0x200000b8

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	200000b8 	.word	0x200000b8

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	@ (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	@ (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	@ (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	@ (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	@ 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	@ (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	@ 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e165      	b.n	8000fa0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 8154 	bne.w	8000f9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d005      	beq.n	8000d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d130      	bne.n	8000d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	68da      	ldr	r2, [r3, #12]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0201 	and.w	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d017      	beq.n	8000da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80ae 	beq.w	8000f9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb8 <HAL_GPIO_Init+0x300>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e46:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb8 <HAL_GPIO_Init+0x300>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4e:	4b5a      	ldr	r3, [pc, #360]	@ (8000fb8 <HAL_GPIO_Init+0x300>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a58      	ldr	r2, [pc, #352]	@ (8000fbc <HAL_GPIO_Init+0x304>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d025      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d01f      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4d      	ldr	r2, [pc, #308]	@ (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4c      	ldr	r2, [pc, #304]	@ (8000fcc <HAL_GPIO_Init+0x314>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd0 <HAL_GPIO_Init+0x318>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x206>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a49      	ldr	r2, [pc, #292]	@ (8000fd8 <HAL_GPIO_Init+0x320>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x202>
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	e00c      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e00a      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ebe:	2305      	movs	r3, #5
 8000ec0:	e008      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	e006      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e004      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000eca:	2302      	movs	r3, #2
 8000ecc:	e002      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <HAL_GPIO_Init+0x21c>
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	69fa      	ldr	r2, [r7, #28]
 8000ed6:	f002 0203 	and.w	r2, r2, #3
 8000eda:	0092      	lsls	r2, r2, #2
 8000edc:	4093      	lsls	r3, r2
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee4:	4935      	ldr	r1, [pc, #212]	@ (8000fbc <HAL_GPIO_Init+0x304>)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a31      	ldr	r2, [pc, #196]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a26      	ldr	r2, [pc, #152]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f46:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f70:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f94:	4a11      	ldr	r2, [pc, #68]	@ (8000fdc <HAL_GPIO_Init+0x324>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	2b0f      	cmp	r3, #15
 8000fa4:	f67f ae96 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40013800 	.word	0x40013800
 8000fc0:	40020000 	.word	0x40020000
 8000fc4:	40020400 	.word	0x40020400
 8000fc8:	40020800 	.word	0x40020800
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40021800 	.word	0x40021800
 8000fdc:	40013c00 	.word	0x40013c00

08000fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	807b      	strh	r3, [r7, #2]
 8000fec:	4613      	mov	r3, r2
 8000fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff0:	787b      	ldrb	r3, [r7, #1]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ff6:	887a      	ldrh	r2, [r7, #2]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ffc:	e003      	b.n	8001006 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	041a      	lsls	r2, r3, #16
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	619a      	str	r2, [r3, #24]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001012:	b480      	push	{r7}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
 800101a:	460b      	mov	r3, r1
 800101c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	695b      	ldr	r3, [r3, #20]
 8001022:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001024:	887a      	ldrh	r2, [r7, #2]
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	041a      	lsls	r2, r3, #16
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43d9      	mvns	r1, r3
 8001030:	887b      	ldrh	r3, [r7, #2]
 8001032:	400b      	ands	r3, r1
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	619a      	str	r2, [r3, #24]
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
	...

08001048 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800104c:	4b05      	ldr	r3, [pc, #20]	@ (8001064 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	6113      	str	r3, [r2, #16]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d101      	bne.n	800107c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0cc      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800107c:	4b68      	ldr	r3, [pc, #416]	@ (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	429a      	cmp	r2, r3
 8001088:	d90c      	bls.n	80010a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800108a:	4b65      	ldr	r3, [pc, #404]	@ (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001092:	4b63      	ldr	r3, [pc, #396]	@ (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0b8      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d020      	beq.n	80010f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d005      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010bc:	4b59      	ldr	r3, [pc, #356]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	4a58      	ldr	r2, [pc, #352]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d005      	beq.n	80010e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d4:	4b53      	ldr	r3, [pc, #332]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4a52      	ldr	r2, [pc, #328]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010e0:	4b50      	ldr	r3, [pc, #320]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	494d      	ldr	r1, [pc, #308]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d044      	beq.n	8001188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d107      	bne.n	8001116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d119      	bne.n	8001146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e07f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d003      	beq.n	8001126 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001122:	2b03      	cmp	r3, #3
 8001124:	d107      	bne.n	8001136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001126:	4b3f      	ldr	r3, [pc, #252]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e06f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001136:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e067      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001146:	4b37      	ldr	r3, [pc, #220]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f023 0203 	bic.w	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4934      	ldr	r1, [pc, #208]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001154:	4313      	orrs	r3, r2
 8001156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001158:	f7ff fc90 	bl	8000a7c <HAL_GetTick>
 800115c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115e:	e00a      	b.n	8001176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001160:	f7ff fc8c 	bl	8000a7c <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e04f      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 020c 	and.w	r2, r3, #12
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	429a      	cmp	r2, r3
 8001186:	d1eb      	bne.n	8001160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001188:	4b25      	ldr	r3, [pc, #148]	@ (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f003 030f 	and.w	r3, r3, #15
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	429a      	cmp	r2, r3
 8001194:	d20c      	bcs.n	80011b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001196:	4b22      	ldr	r3, [pc, #136]	@ (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d001      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e032      	b.n	8001216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0304 	and.w	r3, r3, #4
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	4916      	ldr	r1, [pc, #88]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	4313      	orrs	r3, r2
 80011cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0308 	and.w	r3, r3, #8
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d009      	beq.n	80011ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011da:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	490e      	ldr	r1, [pc, #56]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ee:	f000 f855 	bl	800129c <HAL_RCC_GetSysClockFreq>
 80011f2:	4602      	mov	r2, r0
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_RCC_ClockConfig+0x1bc>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	490a      	ldr	r1, [pc, #40]	@ (8001228 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	5ccb      	ldrb	r3, [r1, r3]
 8001202:	fa22 f303 	lsr.w	r3, r2, r3
 8001206:	4a09      	ldr	r2, [pc, #36]	@ (800122c <HAL_RCC_ClockConfig+0x1c4>)
 8001208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <HAL_RCC_ClockConfig+0x1c8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fbf0 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023c00 	.word	0x40023c00
 8001224:	40023800 	.word	0x40023800
 8001228:	08002860 	.word	0x08002860
 800122c:	20000000 	.word	0x20000000
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001238:	4b03      	ldr	r3, [pc, #12]	@ (8001248 <HAL_RCC_GetHCLKFreq+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000

0800124c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001250:	f7ff fff0 	bl	8001234 <HAL_RCC_GetHCLKFreq>
 8001254:	4602      	mov	r2, r0
 8001256:	4b05      	ldr	r3, [pc, #20]	@ (800126c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	0a9b      	lsrs	r3, r3, #10
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	4903      	ldr	r1, [pc, #12]	@ (8001270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001262:	5ccb      	ldrb	r3, [r1, r3]
 8001264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40023800 	.word	0x40023800
 8001270:	08002870 	.word	0x08002870

08001274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001278:	f7ff ffdc 	bl	8001234 <HAL_RCC_GetHCLKFreq>
 800127c:	4602      	mov	r2, r0
 800127e:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	0b5b      	lsrs	r3, r3, #13
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	4903      	ldr	r1, [pc, #12]	@ (8001298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800128a:	5ccb      	ldrb	r3, [r1, r3]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001290:	4618      	mov	r0, r3
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	08002870 	.word	0x08002870

0800129c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800129c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012a0:	b0ae      	sub	sp, #184	@ 0xb8
 80012a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012c2:	4bcb      	ldr	r3, [pc, #812]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b0c      	cmp	r3, #12
 80012cc:	f200 8206 	bhi.w	80016dc <HAL_RCC_GetSysClockFreq+0x440>
 80012d0:	a201      	add	r2, pc, #4	@ (adr r2, 80012d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d6:	bf00      	nop
 80012d8:	0800130d 	.word	0x0800130d
 80012dc:	080016dd 	.word	0x080016dd
 80012e0:	080016dd 	.word	0x080016dd
 80012e4:	080016dd 	.word	0x080016dd
 80012e8:	08001315 	.word	0x08001315
 80012ec:	080016dd 	.word	0x080016dd
 80012f0:	080016dd 	.word	0x080016dd
 80012f4:	080016dd 	.word	0x080016dd
 80012f8:	0800131d 	.word	0x0800131d
 80012fc:	080016dd 	.word	0x080016dd
 8001300:	080016dd 	.word	0x080016dd
 8001304:	080016dd 	.word	0x080016dd
 8001308:	0800150d 	.word	0x0800150d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800130c:	4bb9      	ldr	r3, [pc, #740]	@ (80015f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800130e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001312:	e1e7      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001314:	4bb8      	ldr	r3, [pc, #736]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800131a:	e1e3      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800131c:	4bb4      	ldr	r3, [pc, #720]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001324:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001328:	4bb1      	ldr	r3, [pc, #708]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d071      	beq.n	8001418 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001334:	4bae      	ldr	r3, [pc, #696]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	099b      	lsrs	r3, r3, #6
 800133a:	2200      	movs	r2, #0
 800133c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001340:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001344:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800134c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001356:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800135a:	4622      	mov	r2, r4
 800135c:	462b      	mov	r3, r5
 800135e:	f04f 0000 	mov.w	r0, #0
 8001362:	f04f 0100 	mov.w	r1, #0
 8001366:	0159      	lsls	r1, r3, #5
 8001368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800136c:	0150      	lsls	r0, r2, #5
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4621      	mov	r1, r4
 8001374:	1a51      	subs	r1, r2, r1
 8001376:	6439      	str	r1, [r7, #64]	@ 0x40
 8001378:	4629      	mov	r1, r5
 800137a:	eb63 0301 	sbc.w	r3, r3, r1
 800137e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800138c:	4649      	mov	r1, r9
 800138e:	018b      	lsls	r3, r1, #6
 8001390:	4641      	mov	r1, r8
 8001392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001396:	4641      	mov	r1, r8
 8001398:	018a      	lsls	r2, r1, #6
 800139a:	4641      	mov	r1, r8
 800139c:	1a51      	subs	r1, r2, r1
 800139e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013a0:	4649      	mov	r1, r9
 80013a2:	eb63 0301 	sbc.w	r3, r3, r1
 80013a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80013b4:	4649      	mov	r1, r9
 80013b6:	00cb      	lsls	r3, r1, #3
 80013b8:	4641      	mov	r1, r8
 80013ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013be:	4641      	mov	r1, r8
 80013c0:	00ca      	lsls	r2, r1, #3
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	4603      	mov	r3, r0
 80013c8:	4622      	mov	r2, r4
 80013ca:	189b      	adds	r3, r3, r2
 80013cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80013ce:	462b      	mov	r3, r5
 80013d0:	460a      	mov	r2, r1
 80013d2:	eb42 0303 	adc.w	r3, r2, r3
 80013d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80013d8:	f04f 0200 	mov.w	r2, #0
 80013dc:	f04f 0300 	mov.w	r3, #0
 80013e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80013e4:	4629      	mov	r1, r5
 80013e6:	024b      	lsls	r3, r1, #9
 80013e8:	4621      	mov	r1, r4
 80013ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013ee:	4621      	mov	r1, r4
 80013f0:	024a      	lsls	r2, r1, #9
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013fa:	2200      	movs	r2, #0
 80013fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001400:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001404:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001408:	f7fe fefc 	bl	8000204 <__aeabi_uldivmod>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4613      	mov	r3, r2
 8001412:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001416:	e067      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001418:	4b75      	ldr	r3, [pc, #468]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	099b      	lsrs	r3, r3, #6
 800141e:	2200      	movs	r2, #0
 8001420:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001424:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001428:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800142c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001430:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001432:	2300      	movs	r3, #0
 8001434:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001436:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800143a:	4622      	mov	r2, r4
 800143c:	462b      	mov	r3, r5
 800143e:	f04f 0000 	mov.w	r0, #0
 8001442:	f04f 0100 	mov.w	r1, #0
 8001446:	0159      	lsls	r1, r3, #5
 8001448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800144c:	0150      	lsls	r0, r2, #5
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4621      	mov	r1, r4
 8001454:	1a51      	subs	r1, r2, r1
 8001456:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001458:	4629      	mov	r1, r5
 800145a:	eb63 0301 	sbc.w	r3, r3, r1
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800146c:	4649      	mov	r1, r9
 800146e:	018b      	lsls	r3, r1, #6
 8001470:	4641      	mov	r1, r8
 8001472:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001476:	4641      	mov	r1, r8
 8001478:	018a      	lsls	r2, r1, #6
 800147a:	4641      	mov	r1, r8
 800147c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001480:	4649      	mov	r1, r9
 8001482:	eb63 0b01 	sbc.w	fp, r3, r1
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001492:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800149a:	4692      	mov	sl, r2
 800149c:	469b      	mov	fp, r3
 800149e:	4623      	mov	r3, r4
 80014a0:	eb1a 0303 	adds.w	r3, sl, r3
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	462b      	mov	r3, r5
 80014a8:	eb4b 0303 	adc.w	r3, fp, r3
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ae:	f04f 0200 	mov.w	r2, #0
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014ba:	4629      	mov	r1, r5
 80014bc:	028b      	lsls	r3, r1, #10
 80014be:	4621      	mov	r1, r4
 80014c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014c4:	4621      	mov	r1, r4
 80014c6:	028a      	lsls	r2, r1, #10
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014d0:	2200      	movs	r2, #0
 80014d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014d4:	677a      	str	r2, [r7, #116]	@ 0x74
 80014d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014da:	f7fe fe93 	bl	8000204 <__aeabi_uldivmod>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4613      	mov	r3, r2
 80014e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014e8:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	0c1b      	lsrs	r3, r3, #16
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	3301      	adds	r3, #1
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80014fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001502:	fbb2 f3f3 	udiv	r3, r2, r3
 8001506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800150a:	e0eb      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800150c:	4b38      	ldr	r3, [pc, #224]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001514:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001518:	4b35      	ldr	r3, [pc, #212]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d06b      	beq.n	80015fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001524:	4b32      	ldr	r3, [pc, #200]	@ (80015f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	099b      	lsrs	r3, r3, #6
 800152a:	2200      	movs	r2, #0
 800152c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800152e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001536:	663b      	str	r3, [r7, #96]	@ 0x60
 8001538:	2300      	movs	r3, #0
 800153a:	667b      	str	r3, [r7, #100]	@ 0x64
 800153c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001540:	4622      	mov	r2, r4
 8001542:	462b      	mov	r3, r5
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	0159      	lsls	r1, r3, #5
 800154e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001552:	0150      	lsls	r0, r2, #5
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4621      	mov	r1, r4
 800155a:	1a51      	subs	r1, r2, r1
 800155c:	61b9      	str	r1, [r7, #24]
 800155e:	4629      	mov	r1, r5
 8001560:	eb63 0301 	sbc.w	r3, r3, r1
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001572:	4659      	mov	r1, fp
 8001574:	018b      	lsls	r3, r1, #6
 8001576:	4651      	mov	r1, sl
 8001578:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800157c:	4651      	mov	r1, sl
 800157e:	018a      	lsls	r2, r1, #6
 8001580:	4651      	mov	r1, sl
 8001582:	ebb2 0801 	subs.w	r8, r2, r1
 8001586:	4659      	mov	r1, fp
 8001588:	eb63 0901 	sbc.w	r9, r3, r1
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001598:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800159c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a0:	4690      	mov	r8, r2
 80015a2:	4699      	mov	r9, r3
 80015a4:	4623      	mov	r3, r4
 80015a6:	eb18 0303 	adds.w	r3, r8, r3
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	462b      	mov	r3, r5
 80015ae:	eb49 0303 	adc.w	r3, r9, r3
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	f04f 0300 	mov.w	r3, #0
 80015bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015c0:	4629      	mov	r1, r5
 80015c2:	024b      	lsls	r3, r1, #9
 80015c4:	4621      	mov	r1, r4
 80015c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ca:	4621      	mov	r1, r4
 80015cc:	024a      	lsls	r2, r1, #9
 80015ce:	4610      	mov	r0, r2
 80015d0:	4619      	mov	r1, r3
 80015d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015d6:	2200      	movs	r2, #0
 80015d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015e0:	f7fe fe10 	bl	8000204 <__aeabi_uldivmod>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4613      	mov	r3, r2
 80015ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015ee:	e065      	b.n	80016bc <HAL_RCC_GetSysClockFreq+0x420>
 80015f0:	40023800 	.word	0x40023800
 80015f4:	00f42400 	.word	0x00f42400
 80015f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015fc:	4b3d      	ldr	r3, [pc, #244]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	099b      	lsrs	r3, r3, #6
 8001602:	2200      	movs	r2, #0
 8001604:	4618      	mov	r0, r3
 8001606:	4611      	mov	r1, r2
 8001608:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800160c:	653b      	str	r3, [r7, #80]	@ 0x50
 800160e:	2300      	movs	r3, #0
 8001610:	657b      	str	r3, [r7, #84]	@ 0x54
 8001612:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001616:	4642      	mov	r2, r8
 8001618:	464b      	mov	r3, r9
 800161a:	f04f 0000 	mov.w	r0, #0
 800161e:	f04f 0100 	mov.w	r1, #0
 8001622:	0159      	lsls	r1, r3, #5
 8001624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001628:	0150      	lsls	r0, r2, #5
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4641      	mov	r1, r8
 8001630:	1a51      	subs	r1, r2, r1
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	4649      	mov	r1, r9
 8001636:	eb63 0301 	sbc.w	r3, r3, r1
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001648:	4659      	mov	r1, fp
 800164a:	018b      	lsls	r3, r1, #6
 800164c:	4651      	mov	r1, sl
 800164e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001652:	4651      	mov	r1, sl
 8001654:	018a      	lsls	r2, r1, #6
 8001656:	4651      	mov	r1, sl
 8001658:	1a54      	subs	r4, r2, r1
 800165a:	4659      	mov	r1, fp
 800165c:	eb63 0501 	sbc.w	r5, r3, r1
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	00eb      	lsls	r3, r5, #3
 800166a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800166e:	00e2      	lsls	r2, r4, #3
 8001670:	4614      	mov	r4, r2
 8001672:	461d      	mov	r5, r3
 8001674:	4643      	mov	r3, r8
 8001676:	18e3      	adds	r3, r4, r3
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	464b      	mov	r3, r9
 800167c:	eb45 0303 	adc.w	r3, r5, r3
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800168e:	4629      	mov	r1, r5
 8001690:	028b      	lsls	r3, r1, #10
 8001692:	4621      	mov	r1, r4
 8001694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001698:	4621      	mov	r1, r4
 800169a:	028a      	lsls	r2, r1, #10
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016a4:	2200      	movs	r2, #0
 80016a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016a8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016aa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016ae:	f7fe fda9 	bl	8000204 <__aeabi_uldivmod>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4613      	mov	r3, r2
 80016b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016bc:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x458>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	0f1b      	lsrs	r3, r3, #28
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80016ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016da:	e003      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	37b8      	adds	r7, #184	@ 0xb8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400

080016fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e28d      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	f000 8083 	beq.w	8001822 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800171c:	4b94      	ldr	r3, [pc, #592]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 030c 	and.w	r3, r3, #12
 8001724:	2b04      	cmp	r3, #4
 8001726:	d019      	beq.n	800175c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001728:	4b91      	ldr	r3, [pc, #580]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001730:	2b08      	cmp	r3, #8
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001734:	4b8e      	ldr	r3, [pc, #568]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800173c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001740:	d00c      	beq.n	800175c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4b8b      	ldr	r3, [pc, #556]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800174a:	2b0c      	cmp	r3, #12
 800174c:	d112      	bne.n	8001774 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001756:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4b84      	ldr	r3, [pc, #528]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d05b      	beq.n	8001820 <HAL_RCC_OscConfig+0x124>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d157      	bne.n	8001820 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e25a      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x90>
 800177e:	4b7c      	ldr	r3, [pc, #496]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a7b      	ldr	r2, [pc, #492]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xcc>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0xb4>
 8001796:	4b76      	ldr	r3, [pc, #472]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a75      	ldr	r2, [pc, #468]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b73      	ldr	r3, [pc, #460]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a72      	ldr	r2, [pc, #456]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xcc>
 80017b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6e      	ldr	r2, [pc, #440]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6b      	ldr	r2, [pc, #428]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d0:	f7ff f954 	bl	8000a7c <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff f950 	bl	8000a7c <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	@ 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e21f      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b61      	ldr	r3, [pc, #388]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xdc>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff f940 	bl	8000a7c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff f93c 	bl	8000a7c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	@ 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e20b      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b57      	ldr	r3, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x104>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d06f      	beq.n	800190e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800182e:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d017      	beq.n	800186a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800183a:	4b4d      	ldr	r3, [pc, #308]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001842:	2b08      	cmp	r3, #8
 8001844:	d105      	bne.n	8001852 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001846:	4b4a      	ldr	r3, [pc, #296]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001852:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800185a:	2b0c      	cmp	r3, #12
 800185c:	d11c      	bne.n	8001898 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185e:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d116      	bne.n	8001898 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d005      	beq.n	8001882 <HAL_RCC_OscConfig+0x186>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d001      	beq.n	8001882 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e1d3      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4b3b      	ldr	r3, [pc, #236]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4937      	ldr	r1, [pc, #220]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001896:	e03a      	b.n	800190e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d020      	beq.n	80018e2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a0:	4b34      	ldr	r3, [pc, #208]	@ (8001974 <HAL_RCC_OscConfig+0x278>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff f8e9 	bl	8000a7c <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ae:	f7ff f8e5 	bl	8000a7c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e1b4      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4925      	ldr	r1, [pc, #148]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
 80018e0:	e015      	b.n	800190e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e2:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <HAL_RCC_OscConfig+0x278>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f8c8 	bl	8000a7c <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f0:	f7ff f8c4 	bl	8000a7c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e193      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001902:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	2b00      	cmp	r3, #0
 8001918:	d036      	beq.n	8001988 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695b      	ldr	r3, [r3, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d016      	beq.n	8001950 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001928:	f7ff f8a8 	bl	8000a7c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff f8a4 	bl	8000a7c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e173      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001942:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_RCC_OscConfig+0x274>)
 8001944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x234>
 800194e:	e01b      	b.n	8001988 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001950:	4b09      	ldr	r3, [pc, #36]	@ (8001978 <HAL_RCC_OscConfig+0x27c>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001956:	f7ff f891 	bl	8000a7c <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800195c:	e00e      	b.n	800197c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff f88d 	bl	8000a7c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d907      	bls.n	800197c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e15c      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
 8001970:	40023800 	.word	0x40023800
 8001974:	42470000 	.word	0x42470000
 8001978:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 800197e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ea      	bne.n	800195e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8097 	beq.w	8001ac4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001996:	2300      	movs	r3, #0
 8001998:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800199a:	4b83      	ldr	r3, [pc, #524]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10f      	bne.n	80019c6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	60bb      	str	r3, [r7, #8]
 80019c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c6:	4b79      	ldr	r3, [pc, #484]	@ (8001bac <HAL_RCC_OscConfig+0x4b0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d118      	bne.n	8001a04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019d2:	4b76      	ldr	r3, [pc, #472]	@ (8001bac <HAL_RCC_OscConfig+0x4b0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a75      	ldr	r2, [pc, #468]	@ (8001bac <HAL_RCC_OscConfig+0x4b0>)
 80019d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019de:	f7ff f84d 	bl	8000a7c <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e6:	f7ff f849 	bl	8000a7c <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e118      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f8:	4b6c      	ldr	r3, [pc, #432]	@ (8001bac <HAL_RCC_OscConfig+0x4b0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x31e>
 8001a0c:	4b66      	ldr	r3, [pc, #408]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a10:	4a65      	ldr	r2, [pc, #404]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a18:	e01c      	b.n	8001a54 <HAL_RCC_OscConfig+0x358>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x340>
 8001a22:	4b61      	ldr	r3, [pc, #388]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a26:	4a60      	ldr	r2, [pc, #384]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a28:	f043 0304 	orr.w	r3, r3, #4
 8001a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a32:	4a5d      	ldr	r2, [pc, #372]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0x358>
 8001a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a40:	4a59      	ldr	r2, [pc, #356]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a42:	f023 0301 	bic.w	r3, r3, #1
 8001a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a48:	4b57      	ldr	r3, [pc, #348]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a4c:	4a56      	ldr	r2, [pc, #344]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a4e:	f023 0304 	bic.w	r3, r3, #4
 8001a52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d015      	beq.n	8001a88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f80e 	bl	8000a7c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a62:	e00a      	b.n	8001a7a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f7ff f80a 	bl	8000a7c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e0d7      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0ee      	beq.n	8001a64 <HAL_RCC_OscConfig+0x368>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a88:	f7fe fff8 	bl	8000a7c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8e:	e00a      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a90:	f7fe fff4 	bl	8000a7c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0c1      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa6:	4b40      	ldr	r3, [pc, #256]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ee      	bne.n	8001a90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ab2:	7dfb      	ldrb	r3, [r7, #23]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d105      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80ad 	beq.w	8001c28 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d060      	beq.n	8001b9c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d145      	bne.n	8001b6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b33      	ldr	r3, [pc, #204]	@ (8001bb0 <HAL_RCC_OscConfig+0x4b4>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae8:	f7fe ffc8 	bl	8000a7c <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7fe ffc4 	bl	8000a7c <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e093      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b02:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69da      	ldr	r2, [r3, #28]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1c:	019b      	lsls	r3, r3, #6
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	085b      	lsrs	r3, r3, #1
 8001b26:	3b01      	subs	r3, #1
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b30:	061b      	lsls	r3, r3, #24
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b38:	071b      	lsls	r3, r3, #28
 8001b3a:	491b      	ldr	r1, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4b4>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b46:	f7fe ff99 	bl	8000a7c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b4e:	f7fe ff95 	bl	8000a7c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e064      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x452>
 8001b6c:	e05c      	b.n	8001c28 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_RCC_OscConfig+0x4b4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7fe ff82 	bl	8000a7c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7c:	f7fe ff7e 	bl	8000a7c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e04d      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x480>
 8001b9a:	e045      	b.n	8001c28 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d107      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e040      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000
 8001bb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c34 <HAL_RCC_OscConfig+0x538>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d030      	beq.n	8001c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d129      	bne.n	8001c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d122      	bne.n	8001c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001be4:	4013      	ands	r3, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d119      	bne.n	8001c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfa:	085b      	lsrs	r3, r3, #1
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d10f      	bne.n	8001c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d107      	bne.n	8001c24 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e041      	b.n	8001cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fdba 	bl	80007d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2202      	movs	r2, #2
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3304      	adds	r3, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f000 f9c0 	bl	8001ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d001      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e04e      	b.n	8001d8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0201 	orr.w	r2, r2, #1
 8001d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	@ (8001d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d022      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d1a:	d01d      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1f      	ldr	r2, [pc, #124]	@ (8001da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d018      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d013      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a1c      	ldr	r2, [pc, #112]	@ (8001da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d00e      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dac <HAL_TIM_Base_Start_IT+0xd4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d009      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a19      	ldr	r2, [pc, #100]	@ (8001db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d004      	beq.n	8001d58 <HAL_TIM_Base_Start_IT+0x80>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a18      	ldr	r2, [pc, #96]	@ (8001db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d111      	bne.n	8001d7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b06      	cmp	r3, #6
 8001d68:	d010      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f042 0201 	orr.w	r2, r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d7a:	e007      	b.n	8001d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0201 	orr.w	r2, r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40000800 	.word	0x40000800
 8001da8:	40000c00 	.word	0x40000c00
 8001dac:	40010400 	.word	0x40010400
 8001db0:	40014000 	.word	0x40014000
 8001db4:	40001800 	.word	0x40001800

08001db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0202 	mvn.w	r2, #2
 8001dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8dc 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f8ce 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8df 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0204 	mvn.w	r2, #4
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8b6 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f8a8 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f8b9 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0208 	mvn.w	r2, #8
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2204      	movs	r2, #4
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f003 0303 	and.w	r3, r3, #3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f890 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f882 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f893 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d020      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0310 	and.w	r3, r3, #16
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01b      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0210 	mvn.w	r2, #16
 8001ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f86a 	bl	8001fc0 <HAL_TIM_IC_CaptureCallback>
 8001eec:	e005      	b.n	8001efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f85c 	bl	8001fac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f000 f86d 	bl	8001fd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0201 	mvn.w	r2, #1
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f83a 	bl	8001f98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f986 	bl	8002254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00c      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f83e 	bl	8001fe8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d007      	beq.n	8001f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0220 	mvn.w	r2, #32
 8001f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f958 	bl	8002240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a43      	ldr	r2, [pc, #268]	@ (800211c <TIM_Base_SetConfig+0x120>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800201a:	d00f      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a40      	ldr	r2, [pc, #256]	@ (8002120 <TIM_Base_SetConfig+0x124>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d00b      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a3f      	ldr	r2, [pc, #252]	@ (8002124 <TIM_Base_SetConfig+0x128>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d007      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a3e      	ldr	r2, [pc, #248]	@ (8002128 <TIM_Base_SetConfig+0x12c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a3d      	ldr	r2, [pc, #244]	@ (800212c <TIM_Base_SetConfig+0x130>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d108      	bne.n	800204e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a32      	ldr	r2, [pc, #200]	@ (800211c <TIM_Base_SetConfig+0x120>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800205c:	d027      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <TIM_Base_SetConfig+0x124>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d023      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2e      	ldr	r2, [pc, #184]	@ (8002124 <TIM_Base_SetConfig+0x128>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2d      	ldr	r2, [pc, #180]	@ (8002128 <TIM_Base_SetConfig+0x12c>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d01b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2c      	ldr	r2, [pc, #176]	@ (800212c <TIM_Base_SetConfig+0x130>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d017      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <TIM_Base_SetConfig+0x134>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d013      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2a      	ldr	r2, [pc, #168]	@ (8002134 <TIM_Base_SetConfig+0x138>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00f      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a29      	ldr	r2, [pc, #164]	@ (8002138 <TIM_Base_SetConfig+0x13c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00b      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a28      	ldr	r2, [pc, #160]	@ (800213c <TIM_Base_SetConfig+0x140>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a27      	ldr	r2, [pc, #156]	@ (8002140 <TIM_Base_SetConfig+0x144>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a26      	ldr	r2, [pc, #152]	@ (8002144 <TIM_Base_SetConfig+0x148>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d108      	bne.n	80020c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	@ (800211c <TIM_Base_SetConfig+0x120>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <TIM_Base_SetConfig+0xf2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a10      	ldr	r2, [pc, #64]	@ (800212c <TIM_Base_SetConfig+0x130>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d103      	bne.n	80020f6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40010000 	.word	0x40010000
 8002120:	40000400 	.word	0x40000400
 8002124:	40000800 	.word	0x40000800
 8002128:	40000c00 	.word	0x40000c00
 800212c:	40010400 	.word	0x40010400
 8002130:	40014000 	.word	0x40014000
 8002134:	40014400 	.word	0x40014400
 8002138:	40014800 	.word	0x40014800
 800213c:	40001800 	.word	0x40001800
 8002140:	40001c00 	.word	0x40001c00
 8002144:	40002000 	.word	0x40002000

08002148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800215c:	2302      	movs	r3, #2
 800215e:	e05a      	b.n	8002216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2202      	movs	r2, #2
 800216c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a21      	ldr	r2, [pc, #132]	@ (8002224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d022      	beq.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021ac:	d01d      	beq.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d018      	beq.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d013      	beq.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00e      	beq.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d009      	beq.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a17      	ldr	r2, [pc, #92]	@ (8002238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d004      	beq.n	80021ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a15      	ldr	r2, [pc, #84]	@ (800223c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10c      	bne.n	8002204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40010000 	.word	0x40010000
 8002228:	40000400 	.word	0x40000400
 800222c:	40000800 	.word	0x40000800
 8002230:	40000c00 	.word	0x40000c00
 8002234:	40010400 	.word	0x40010400
 8002238:	40014000 	.word	0x40014000
 800223c:	40001800 	.word	0x40001800

08002240 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e042      	b.n	8002300 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d106      	bne.n	8002294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fe faca 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2224      	movs	r2, #36	@ 0x24
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80022aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f82b 	bl	8002308 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800230c:	b0c0      	sub	sp, #256	@ 0x100
 800230e:	af00      	add	r7, sp, #0
 8002310:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002324:	68d9      	ldr	r1, [r3, #12]
 8002326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	ea40 0301 	orr.w	r3, r0, r1
 8002330:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	431a      	orrs	r2, r3
 8002340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	431a      	orrs	r2, r3
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002360:	f021 010c 	bic.w	r1, r1, #12
 8002364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800236e:	430b      	orrs	r3, r1
 8002370:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	6999      	ldr	r1, [r3, #24]
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	ea40 0301 	orr.w	r3, r0, r1
 800238e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b8f      	ldr	r3, [pc, #572]	@ (80025d4 <UART_SetConfig+0x2cc>)
 8002398:	429a      	cmp	r2, r3
 800239a:	d005      	beq.n	80023a8 <UART_SetConfig+0xa0>
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	4b8d      	ldr	r3, [pc, #564]	@ (80025d8 <UART_SetConfig+0x2d0>)
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d104      	bne.n	80023b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023a8:	f7fe ff64 	bl	8001274 <HAL_RCC_GetPCLK2Freq>
 80023ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80023b0:	e003      	b.n	80023ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023b2:	f7fe ff4b 	bl	800124c <HAL_RCC_GetPCLK1Freq>
 80023b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c4:	f040 810c 	bne.w	80025e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023cc:	2200      	movs	r2, #0
 80023ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023da:	4622      	mov	r2, r4
 80023dc:	462b      	mov	r3, r5
 80023de:	1891      	adds	r1, r2, r2
 80023e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023e2:	415b      	adcs	r3, r3
 80023e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023ea:	4621      	mov	r1, r4
 80023ec:	eb12 0801 	adds.w	r8, r2, r1
 80023f0:	4629      	mov	r1, r5
 80023f2:	eb43 0901 	adc.w	r9, r3, r1
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800240a:	4690      	mov	r8, r2
 800240c:	4699      	mov	r9, r3
 800240e:	4623      	mov	r3, r4
 8002410:	eb18 0303 	adds.w	r3, r8, r3
 8002414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002418:	462b      	mov	r3, r5
 800241a:	eb49 0303 	adc.w	r3, r9, r3
 800241e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800242e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002432:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002436:	460b      	mov	r3, r1
 8002438:	18db      	adds	r3, r3, r3
 800243a:	653b      	str	r3, [r7, #80]	@ 0x50
 800243c:	4613      	mov	r3, r2
 800243e:	eb42 0303 	adc.w	r3, r2, r3
 8002442:	657b      	str	r3, [r7, #84]	@ 0x54
 8002444:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002448:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800244c:	f7fd feda 	bl	8000204 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4b61      	ldr	r3, [pc, #388]	@ (80025dc <UART_SetConfig+0x2d4>)
 8002456:	fba3 2302 	umull	r2, r3, r3, r2
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	011c      	lsls	r4, r3, #4
 800245e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002462:	2200      	movs	r2, #0
 8002464:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002468:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800246c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002470:	4642      	mov	r2, r8
 8002472:	464b      	mov	r3, r9
 8002474:	1891      	adds	r1, r2, r2
 8002476:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002478:	415b      	adcs	r3, r3
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800247c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002480:	4641      	mov	r1, r8
 8002482:	eb12 0a01 	adds.w	sl, r2, r1
 8002486:	4649      	mov	r1, r9
 8002488:	eb43 0b01 	adc.w	fp, r3, r1
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002498:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800249c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024a0:	4692      	mov	sl, r2
 80024a2:	469b      	mov	fp, r3
 80024a4:	4643      	mov	r3, r8
 80024a6:	eb1a 0303 	adds.w	r3, sl, r3
 80024aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80024ae:	464b      	mov	r3, r9
 80024b0:	eb4b 0303 	adc.w	r3, fp, r3
 80024b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024cc:	460b      	mov	r3, r1
 80024ce:	18db      	adds	r3, r3, r3
 80024d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80024d2:	4613      	mov	r3, r2
 80024d4:	eb42 0303 	adc.w	r3, r2, r3
 80024d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80024da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024e2:	f7fd fe8f 	bl	8000204 <__aeabi_uldivmod>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4611      	mov	r1, r2
 80024ec:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <UART_SetConfig+0x2d4>)
 80024ee:	fba3 2301 	umull	r2, r3, r3, r1
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	2264      	movs	r2, #100	@ 0x64
 80024f6:	fb02 f303 	mul.w	r3, r2, r3
 80024fa:	1acb      	subs	r3, r1, r3
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002502:	4b36      	ldr	r3, [pc, #216]	@ (80025dc <UART_SetConfig+0x2d4>)
 8002504:	fba3 2302 	umull	r2, r3, r3, r2
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002510:	441c      	add	r4, r3
 8002512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002516:	2200      	movs	r2, #0
 8002518:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800251c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002520:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002524:	4642      	mov	r2, r8
 8002526:	464b      	mov	r3, r9
 8002528:	1891      	adds	r1, r2, r2
 800252a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800252c:	415b      	adcs	r3, r3
 800252e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002534:	4641      	mov	r1, r8
 8002536:	1851      	adds	r1, r2, r1
 8002538:	6339      	str	r1, [r7, #48]	@ 0x30
 800253a:	4649      	mov	r1, r9
 800253c:	414b      	adcs	r3, r1
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	f04f 0300 	mov.w	r3, #0
 8002548:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800254c:	4659      	mov	r1, fp
 800254e:	00cb      	lsls	r3, r1, #3
 8002550:	4651      	mov	r1, sl
 8002552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002556:	4651      	mov	r1, sl
 8002558:	00ca      	lsls	r2, r1, #3
 800255a:	4610      	mov	r0, r2
 800255c:	4619      	mov	r1, r3
 800255e:	4603      	mov	r3, r0
 8002560:	4642      	mov	r2, r8
 8002562:	189b      	adds	r3, r3, r2
 8002564:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002568:	464b      	mov	r3, r9
 800256a:	460a      	mov	r2, r1
 800256c:	eb42 0303 	adc.w	r3, r2, r3
 8002570:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002580:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002584:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002588:	460b      	mov	r3, r1
 800258a:	18db      	adds	r3, r3, r3
 800258c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800258e:	4613      	mov	r3, r2
 8002590:	eb42 0303 	adc.w	r3, r2, r3
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800259a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800259e:	f7fd fe31 	bl	8000204 <__aeabi_uldivmod>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4b0d      	ldr	r3, [pc, #52]	@ (80025dc <UART_SetConfig+0x2d4>)
 80025a8:	fba3 1302 	umull	r1, r3, r3, r2
 80025ac:	095b      	lsrs	r3, r3, #5
 80025ae:	2164      	movs	r1, #100	@ 0x64
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	3332      	adds	r3, #50	@ 0x32
 80025ba:	4a08      	ldr	r2, [pc, #32]	@ (80025dc <UART_SetConfig+0x2d4>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	095b      	lsrs	r3, r3, #5
 80025c2:	f003 0207 	and.w	r2, r3, #7
 80025c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4422      	add	r2, r4
 80025ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025d0:	e106      	b.n	80027e0 <UART_SetConfig+0x4d8>
 80025d2:	bf00      	nop
 80025d4:	40011000 	.word	0x40011000
 80025d8:	40011400 	.word	0x40011400
 80025dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025f2:	4642      	mov	r2, r8
 80025f4:	464b      	mov	r3, r9
 80025f6:	1891      	adds	r1, r2, r2
 80025f8:	6239      	str	r1, [r7, #32]
 80025fa:	415b      	adcs	r3, r3
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002602:	4641      	mov	r1, r8
 8002604:	1854      	adds	r4, r2, r1
 8002606:	4649      	mov	r1, r9
 8002608:	eb43 0501 	adc.w	r5, r3, r1
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	00eb      	lsls	r3, r5, #3
 8002616:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800261a:	00e2      	lsls	r2, r4, #3
 800261c:	4614      	mov	r4, r2
 800261e:	461d      	mov	r5, r3
 8002620:	4643      	mov	r3, r8
 8002622:	18e3      	adds	r3, r4, r3
 8002624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002628:	464b      	mov	r3, r9
 800262a:	eb45 0303 	adc.w	r3, r5, r3
 800262e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800263e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800264e:	4629      	mov	r1, r5
 8002650:	008b      	lsls	r3, r1, #2
 8002652:	4621      	mov	r1, r4
 8002654:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002658:	4621      	mov	r1, r4
 800265a:	008a      	lsls	r2, r1, #2
 800265c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002660:	f7fd fdd0 	bl	8000204 <__aeabi_uldivmod>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4b60      	ldr	r3, [pc, #384]	@ (80027ec <UART_SetConfig+0x4e4>)
 800266a:	fba3 2302 	umull	r2, r3, r3, r2
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	011c      	lsls	r4, r3, #4
 8002672:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002676:	2200      	movs	r2, #0
 8002678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800267c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002680:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	1891      	adds	r1, r2, r2
 800268a:	61b9      	str	r1, [r7, #24]
 800268c:	415b      	adcs	r3, r3
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002694:	4641      	mov	r1, r8
 8002696:	1851      	adds	r1, r2, r1
 8002698:	6139      	str	r1, [r7, #16]
 800269a:	4649      	mov	r1, r9
 800269c:	414b      	adcs	r3, r1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026ac:	4659      	mov	r1, fp
 80026ae:	00cb      	lsls	r3, r1, #3
 80026b0:	4651      	mov	r1, sl
 80026b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026b6:	4651      	mov	r1, sl
 80026b8:	00ca      	lsls	r2, r1, #3
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	4603      	mov	r3, r0
 80026c0:	4642      	mov	r2, r8
 80026c2:	189b      	adds	r3, r3, r2
 80026c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026c8:	464b      	mov	r3, r9
 80026ca:	460a      	mov	r2, r1
 80026cc:	eb42 0303 	adc.w	r3, r2, r3
 80026d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026ec:	4649      	mov	r1, r9
 80026ee:	008b      	lsls	r3, r1, #2
 80026f0:	4641      	mov	r1, r8
 80026f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026f6:	4641      	mov	r1, r8
 80026f8:	008a      	lsls	r2, r1, #2
 80026fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026fe:	f7fd fd81 	bl	8000204 <__aeabi_uldivmod>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4611      	mov	r1, r2
 8002708:	4b38      	ldr	r3, [pc, #224]	@ (80027ec <UART_SetConfig+0x4e4>)
 800270a:	fba3 2301 	umull	r2, r3, r3, r1
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	2264      	movs	r2, #100	@ 0x64
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	1acb      	subs	r3, r1, r3
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	3332      	adds	r3, #50	@ 0x32
 800271c:	4a33      	ldr	r2, [pc, #204]	@ (80027ec <UART_SetConfig+0x4e4>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	095b      	lsrs	r3, r3, #5
 8002724:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002728:	441c      	add	r4, r3
 800272a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800272e:	2200      	movs	r2, #0
 8002730:	673b      	str	r3, [r7, #112]	@ 0x70
 8002732:	677a      	str	r2, [r7, #116]	@ 0x74
 8002734:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002738:	4642      	mov	r2, r8
 800273a:	464b      	mov	r3, r9
 800273c:	1891      	adds	r1, r2, r2
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	415b      	adcs	r3, r3
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002748:	4641      	mov	r1, r8
 800274a:	1851      	adds	r1, r2, r1
 800274c:	6039      	str	r1, [r7, #0]
 800274e:	4649      	mov	r1, r9
 8002750:	414b      	adcs	r3, r1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002760:	4659      	mov	r1, fp
 8002762:	00cb      	lsls	r3, r1, #3
 8002764:	4651      	mov	r1, sl
 8002766:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800276a:	4651      	mov	r1, sl
 800276c:	00ca      	lsls	r2, r1, #3
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	4603      	mov	r3, r0
 8002774:	4642      	mov	r2, r8
 8002776:	189b      	adds	r3, r3, r2
 8002778:	66bb      	str	r3, [r7, #104]	@ 0x68
 800277a:	464b      	mov	r3, r9
 800277c:	460a      	mov	r2, r1
 800277e:	eb42 0303 	adc.w	r3, r2, r3
 8002782:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	663b      	str	r3, [r7, #96]	@ 0x60
 800278e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800279c:	4649      	mov	r1, r9
 800279e:	008b      	lsls	r3, r1, #2
 80027a0:	4641      	mov	r1, r8
 80027a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027a6:	4641      	mov	r1, r8
 80027a8:	008a      	lsls	r2, r1, #2
 80027aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80027ae:	f7fd fd29 	bl	8000204 <__aeabi_uldivmod>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	4b0d      	ldr	r3, [pc, #52]	@ (80027ec <UART_SetConfig+0x4e4>)
 80027b8:	fba3 1302 	umull	r1, r3, r3, r2
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	2164      	movs	r1, #100	@ 0x64
 80027c0:	fb01 f303 	mul.w	r3, r1, r3
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	3332      	adds	r3, #50	@ 0x32
 80027ca:	4a08      	ldr	r2, [pc, #32]	@ (80027ec <UART_SetConfig+0x4e4>)
 80027cc:	fba2 2303 	umull	r2, r3, r2, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	f003 020f 	and.w	r2, r3, #15
 80027d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4422      	add	r2, r4
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027e6:	46bd      	mov	sp, r7
 80027e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ec:	51eb851f 	.word	0x51eb851f

080027f0 <memset>:
 80027f0:	4402      	add	r2, r0
 80027f2:	4603      	mov	r3, r0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d100      	bne.n	80027fa <memset+0xa>
 80027f8:	4770      	bx	lr
 80027fa:	f803 1b01 	strb.w	r1, [r3], #1
 80027fe:	e7f9      	b.n	80027f4 <memset+0x4>

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	4d0d      	ldr	r5, [pc, #52]	@ (8002838 <__libc_init_array+0x38>)
 8002804:	4c0d      	ldr	r4, [pc, #52]	@ (800283c <__libc_init_array+0x3c>)
 8002806:	1b64      	subs	r4, r4, r5
 8002808:	10a4      	asrs	r4, r4, #2
 800280a:	2600      	movs	r6, #0
 800280c:	42a6      	cmp	r6, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	4d0b      	ldr	r5, [pc, #44]	@ (8002840 <__libc_init_array+0x40>)
 8002812:	4c0c      	ldr	r4, [pc, #48]	@ (8002844 <__libc_init_array+0x44>)
 8002814:	f000 f818 	bl	8002848 <_init>
 8002818:	1b64      	subs	r4, r4, r5
 800281a:	10a4      	asrs	r4, r4, #2
 800281c:	2600      	movs	r6, #0
 800281e:	42a6      	cmp	r6, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f855 3b04 	ldr.w	r3, [r5], #4
 8002828:	4798      	blx	r3
 800282a:	3601      	adds	r6, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002832:	4798      	blx	r3
 8002834:	3601      	adds	r6, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	08002880 	.word	0x08002880
 800283c:	08002880 	.word	0x08002880
 8002840:	08002880 	.word	0x08002880
 8002844:	08002884 	.word	0x08002884

08002848 <_init>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	bf00      	nop
 800284c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800284e:	bc08      	pop	{r3}
 8002850:	469e      	mov	lr, r3
 8002852:	4770      	bx	lr

08002854 <_fini>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr
